services: # 각 서비스를 독립적으로 정의하고, 관리
  reservations: # reservations 서비스 설정
    build: # 서비스의 도커 이미지를 빌드할 때 필요한 다양한 설정을 지정
      context: . # 도커 이미지를 빌드할 때 사용되는 파일들이 위치한 디렉토리 (Build context)
      dockerfile: ./apps/reservations/Dockerfile # reservations 서비스의 도커 이미지를 빌드하기 위해 사용할 도커 파일(Dockerfile)의 경로를 지정
      target: development # 특정 스테이지(stage)를 빌드 대상으로 지정
    command: npm run start:dev reservations # 도커 컨테이너가 시작될 때 실행될 명령어
    ports:
      # 포트 바인딩(port binding)
      # 호스트 머신과 컨테이너 간에 포트를 공유하고, 동기화
      - '3000:3000'
    volumes:
      # .:/user/src/app은 호스트 머신의 현재 디렉토리(.)를
      # 컨테이너 내부의 /user/src/app 경로와 연결
      # 호스트 머신과 컨테이너 내부의 /user/src/app 경로가 연결되어,
      # 호스트 머신에서 수정한 파일을 컨테이너 내부에서 바로 사용
      # 로컬 머신에서 코드를 작성하고, 이를 바로 컨테이너에서 테스트하거나 실행할 수 있음
      - .:/user/src/app
  mongo:
    image: mongo
#
# 실행 명령어
# `docker-compose up`
# docker-compose로 시작된 애플리케이션을 종료하고, 모든 리소스를 정리하는 명령어
# docker-compose up 명령어로 시작된 컨테이너들이 중지되고, 모든 네트워크와 볼륨이 제거
# 애플리케이션을 구성하는 모든 컨테이너 및 리소스를 완전히 종료하고, 초기 상태로 되돌리는 데 사용
#
# `docker-compose up`
# docker-compose로 정의된 애플리케이션을 실행하는 명령어
# docker-compose.yml 파일에서 정의한 서비스들이 순차적으로 실행되며,
# 서비스 간에 정의된 의존성에 따라 컨테이너가 시작
# 여러 개의 서비스를 조합하여 애플리케이션을 구성할 수 있으며, 컨테이너 실행 및 관리를 자동으로 처리
#
# `up-down`
# docker-compose up 명령어로 실행된 컨테이너는 Ctrl+C를 입력하여 종료할 수 있습니다.
# 이는 해당 터미널에서 docker-compose up 명령어를 실행하고 있는 경우,
# 해당 명령어를 강제로 중지하는 역할을 합니다.
# 그러나 이 경우 docker-compose down 명령어를 사용하지 않은 경우이므로,
# 종료된 컨테이너의 네트워크와 볼륨이 삭제되지 않습니다.
# 따라서 이후에 다시 docker-compose up 명령어를 실행하면,
# 종료되지 않은 컨테이너와 충돌이 발생할 수 있습니다.
# 따라서 docker-compose up 명령어를 중지할 경우,
# 종료된 컨테이너의 네트워크와 볼륨을 제거하려면 docker-compose down 명령어를 사용하는 것이 좋습니다.
# 이를 통해 컨테이너 및 리소스를 완전히 종료하고, 초기 상태로 되돌릴 수 있습니다.
